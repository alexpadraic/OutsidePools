<div class=col-md-12 style="align:center;">
      <div class="main clearfix">
        <form id="nl-form" class="nl-form">
          I would like a ride from
          <input style="height:100%;" id="autocomplete" placeholder="Folsom Street..." onFocus="geolocate()" name="location" type="text" class="form-control"></input>
          on
          <select>
            <option value="1" selected>all days</option>
            <option value="2">August 6</option>
            <option value="3">August 7</option>
            <option value="4">August 8</option>
          </select>
          between
          <select>
            <option value="1" selected>6 p.m.</option>
            <option value="2">7 p.m.</option>
            <option value="3">8 p.m.</option>
            <option value="4">9 p.m.</option>
          </select>
          and
          <select>
            <option value="1" selected>6 p.m.</option>
            <option value="2">7 p.m.</option>
            <option value="3">8 p.m.</option>
            <option value="4">9 p.m.</option>
          </select>
          <br/>and need
          <select>
            <option value="1" selected>3 seats</option>
            <option value="2">2 seats</option>
            <option value="3">1 seat</option>
          </select>
          <br/>
          <div class="nl-submit-wrap">
            <button class="nl-submit" type="submit">Request a Ride</button>
          </div>
          <div class="nl-overlay"></div>
        </form>
      </div>
    </div>
  </div>

<script>
  // This example displays an address form, using the autocomplete feature of the Google Places API to help users fill in the information. This example requires the Places library. Include the libraries=places parameter when you first load the API. For
  // example: <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  var placeSearch,
    autocomplete;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical location types.
    autocomplete = new google.maps.places.Autocomplete(
    /** @type {!HTMLInputElement} */
    (document.getElementById('autocomplete')), {types: ['geocode']});

    // When the user selects an address from the dropdown, populate the address fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
  }

  function fillInAddress() {
    // Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();

    for (var component in componentForm) {
      document.getElementById(component).value = '';
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

  // Bias the autocomplete object to the user's geographical location, as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    var geolocation;
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude

        };
        return geolocation;
        var circle = new google.maps.Circle({center: geolocation, radius: position.coords.accuracy});
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }
</script>
